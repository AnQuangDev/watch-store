{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass APIService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Helper method để tạo request options\n  createRequestOptions(method = 'GET', data = null, includeAuth = true) {\n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    // Thêm token vào header nếu cần\n    if (includeAuth) {\n      const token = localStorage.getItem('token');\n      if (token) {\n        options.headers.Authorization = `Bearer ${token}`;\n      }\n    }\n\n    // Thêm body data nếu có\n    if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n      options.body = JSON.stringify(data);\n    }\n    return options;\n  }\n\n  // Helper method để xử lý response\n  async handleResponse(response) {\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || `HTTP error! status: ${response.status}`);\n    }\n    return data;\n  }\n\n  // Auth methods\n  async register(userData) {\n    try {\n      const response = await fetch(`${this.baseURL}/auth/register`, this.createRequestOptions('POST', userData, false));\n      const result = await this.handleResponse(response);\n\n      // Lưu token vào localStorage\n      if (result.success && result.token) {\n        localStorage.setItem('token', result.token);\n      }\n      return result;\n    } catch (error) {\n      console.error('Register API error:', error);\n      return {\n        success: false,\n        error: error.message || 'Có lỗi xảy ra khi đăng ký'\n      };\n    }\n  }\n  async login(email, password) {\n    try {\n      const response = await fetch(`${this.baseURL}/auth/login`, this.createRequestOptions('POST', {\n        email,\n        password\n      }, false));\n      const result = await this.handleResponse(response);\n\n      // Lưu token vào localStorage\n      if (result.success && result.token) {\n        localStorage.setItem('token', result.token);\n      }\n      return result;\n    } catch (error) {\n      console.error('Login API error:', error);\n      return {\n        success: false,\n        error: error.message || 'Có lỗi xảy ra khi đăng nhập'\n      };\n    }\n  }\n  async getCurrentUser() {\n    try {\n      const response = await fetch(`${this.baseURL}/auth/me`, this.createRequestOptions('GET', null, true));\n      return await this.handleResponse(response);\n    } catch (error) {\n      console.error('Get current user API error:', error);\n      return {\n        success: false,\n        error: error.message || 'Có lỗi xảy ra khi lấy thông tin người dùng'\n      };\n    }\n  }\n  async getAllUsers() {\n    try {\n      const response = await fetch(`${this.baseURL}/users`, this.createRequestOptions('GET', null, true));\n      return await this.handleResponse(response);\n    } catch (error) {\n      console.error('Get users API error:', error);\n      return {\n        success: false,\n        error: error.message || 'Có lỗi xảy ra khi lấy danh sách người dùng'\n      };\n    }\n  }\n\n  // Admin methods\n  async updateUserRole(userId, role, permissions) {\n    try {\n      const response = await fetch(`${this.baseURL}/admin/users/${userId}/role`, this.createRequestOptions('PUT', {\n        role,\n        permissions\n      }, true));\n      return await this.handleResponse(response);\n    } catch (error) {\n      console.error('Update user role API error:', error);\n      return {\n        success: false,\n        error: error.message || 'Có lỗi xảy ra khi cập nhật role'\n      };\n    }\n  }\n  async deleteUser(userId) {\n    try {\n      const response = await fetch(`${this.baseURL}/admin/users/${userId}`, this.createRequestOptions('DELETE', null, true));\n      return await this.handleResponse(response);\n    } catch (error) {\n      console.error('Delete user API error:', error);\n      return {\n        success: false,\n        error: error.message || 'Có lỗi xảy ra khi xóa người dùng'\n      };\n    }\n  }\n  async getUserPermissions() {\n    try {\n      const response = await fetch(`${this.baseURL}/auth/permissions`, this.createRequestOptions('GET', null, true));\n      return await this.handleResponse(response);\n    } catch (error) {\n      console.error('Get permissions API error:', error);\n      return {\n        success: false,\n        error: error.message || 'Có lỗi xảy ra khi lấy quyền người dùng'\n      };\n    }\n  }\n\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await fetch(`${this.baseURL}/health`, this.createRequestOptions('GET', null, false));\n      return await this.handleResponse(response);\n    } catch (error) {\n      console.error('Health check API error:', error);\n      return {\n        success: false,\n        error: error.message || 'Không thể kết nối với server'\n      };\n    }\n  }\n\n  // Logout (clear token)\n  logout() {\n    localStorage.removeItem('token');\n    return {\n      success: true\n    };\n  }\n}\n\n// Export singleton instance\nconst apiService = new APIService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","APIService","constructor","baseURL","createRequestOptions","method","data","includeAuth","options","headers","token","localStorage","getItem","Authorization","body","JSON","stringify","handleResponse","response","json","ok","Error","error","status","register","userData","fetch","result","success","setItem","console","message","login","email","password","getCurrentUser","getAllUsers","updateUserRole","userId","role","permissions","deleteUser","getUserPermissions","healthCheck","logout","removeItem","apiService"],"sources":["C:/Users/zbook/web/src/services/apiService.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass APIService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  // Helper method để tạo request options\r\n  createRequestOptions(method = 'GET', data = null, includeAuth = true) {\r\n    const options = {\r\n      method,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    // Thêm token vào header nếu cần\r\n    if (includeAuth) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        options.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n    }\r\n\r\n    // Thêm body data nếu có\r\n    if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\r\n      options.body = JSON.stringify(data);\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  // Helper method để xử lý response\r\n  async handleResponse(response) {\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.error || `HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    return data;\r\n  }\r\n\r\n  // Auth methods\r\n  async register(userData) {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/auth/register`, \r\n        this.createRequestOptions('POST', userData, false)\r\n      );\r\n      \r\n      const result = await this.handleResponse(response);\r\n      \r\n      // Lưu token vào localStorage\r\n      if (result.success && result.token) {\r\n        localStorage.setItem('token', result.token);\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('Register API error:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Có lỗi xảy ra khi đăng ký'\r\n      };\r\n    }\r\n  }\r\n\r\n  async login(email, password) {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/auth/login`, \r\n        this.createRequestOptions('POST', { email, password }, false)\r\n      );\r\n      \r\n      const result = await this.handleResponse(response);\r\n      \r\n      // Lưu token vào localStorage\r\n      if (result.success && result.token) {\r\n        localStorage.setItem('token', result.token);\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('Login API error:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Có lỗi xảy ra khi đăng nhập'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getCurrentUser() {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/auth/me`, \r\n        this.createRequestOptions('GET', null, true)\r\n      );\r\n      \r\n      return await this.handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Get current user API error:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Có lỗi xảy ra khi lấy thông tin người dùng'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getAllUsers() {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/users`, \r\n        this.createRequestOptions('GET', null, true)\r\n      );\r\n      \r\n      return await this.handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Get users API error:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Có lỗi xảy ra khi lấy danh sách người dùng'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Admin methods\r\n  async updateUserRole(userId, role, permissions) {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/admin/users/${userId}/role`, \r\n        this.createRequestOptions('PUT', { role, permissions }, true)\r\n      );\r\n      \r\n      return await this.handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Update user role API error:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Có lỗi xảy ra khi cập nhật role'\r\n      };\r\n    }\r\n  }\r\n\r\n  async deleteUser(userId) {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/admin/users/${userId}`, \r\n        this.createRequestOptions('DELETE', null, true)\r\n      );\r\n      \r\n      return await this.handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Delete user API error:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Có lỗi xảy ra khi xóa người dùng'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getUserPermissions() {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/auth/permissions`, \r\n        this.createRequestOptions('GET', null, true)\r\n      );\r\n      \r\n      return await this.handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Get permissions API error:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Có lỗi xảy ra khi lấy quyền người dùng'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Health check\r\n  async healthCheck() {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/health`, \r\n        this.createRequestOptions('GET', null, false)\r\n      );\r\n      \r\n      return await this.handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Health check API error:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Không thể kết nối với server'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Logout (clear token)\r\n  logout() {\r\n    localStorage.removeItem('token');\r\n    return { success: true };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nconst apiService = new APIService();\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}