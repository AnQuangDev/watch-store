{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zbook\\\\web\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Kiểm tra user từ localStorage khi app khởi động\n  useEffect(() => {\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      try {\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error('Error parsing saved user:', error);\n        localStorage.removeItem('user');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  // Đăng nhập\n  const login = async (email, password) => {\n    try {\n      // Mô phỏng API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Kiểm tra thông tin đăng nhập (demo)\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const foundUser = users.find(u => u.email === email && u.password === password);\n      if (foundUser) {\n        const userInfo = {\n          id: foundUser.id,\n          email: foundUser.email,\n          name: foundUser.name,\n          avatar: foundUser.avatar || `https://ui-avatars.com/api/?name=${foundUser.name}&background=3b82f6&color=fff`\n        };\n        setUser(userInfo);\n        localStorage.setItem('user', JSON.stringify(userInfo));\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Email hoặc mật khẩu không chính xác'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Có lỗi xảy ra khi đăng nhập'\n      };\n    }\n  };\n\n  // Đăng ký\n  const register = async userData => {\n    try {\n      // Mô phỏng API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const {\n        name,\n        email,\n        password\n      } = userData;\n\n      // Kiểm tra email đã tồn tại chưa\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const existingUser = users.find(u => u.email === email);\n      if (existingUser) {\n        return {\n          success: false,\n          error: 'Email đã được sử dụng'\n        };\n      }\n\n      // Tạo user mới\n      const newUser = {\n        id: Date.now(),\n        name,\n        email,\n        password,\n        createdAt: new Date().toISOString()\n      };\n      users.push(newUser);\n      localStorage.setItem('users', JSON.stringify(users));\n\n      // Tự động đăng nhập sau khi đăng ký\n      const userInfo = {\n        id: newUser.id,\n        email: newUser.email,\n        name: newUser.name,\n        avatar: `https://ui-avatars.com/api/?name=${newUser.name}&background=3b82f6&color=fff`\n      };\n      setUser(userInfo);\n      localStorage.setItem('user', JSON.stringify(userInfo));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Có lỗi xảy ra khi đăng ký'\n      };\n    }\n  };\n\n  // Đăng xuất\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const value = {\n    user,\n    isLoading,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","savedUser","localStorage","getItem","JSON","parse","error","console","removeItem","login","email","password","Promise","resolve","setTimeout","users","foundUser","find","u","userInfo","id","name","avatar","setItem","stringify","success","register","userData","existingUser","newUser","Date","now","createdAt","toISOString","push","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/zbook/web/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Kiểm tra user từ localStorage khi app khởi động\r\n  useEffect(() => {\r\n    const savedUser = localStorage.getItem('user');\r\n    if (savedUser) {\r\n      try {\r\n        setUser(JSON.parse(savedUser));\r\n      } catch (error) {\r\n        console.error('Error parsing saved user:', error);\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  // Đăng nhập\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Mô phỏng API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Kiểm tra thông tin đăng nhập (demo)\r\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n      const foundUser = users.find(u => u.email === email && u.password === password);\r\n      \r\n      if (foundUser) {\r\n        const userInfo = {\r\n          id: foundUser.id,\r\n          email: foundUser.email,\r\n          name: foundUser.name,\r\n          avatar: foundUser.avatar || `https://ui-avatars.com/api/?name=${foundUser.name}&background=3b82f6&color=fff`\r\n        };\r\n        \r\n        setUser(userInfo);\r\n        localStorage.setItem('user', JSON.stringify(userInfo));\r\n        return { success: true };\r\n      } else {\r\n        return { success: false, error: 'Email hoặc mật khẩu không chính xác' };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, error: 'Có lỗi xảy ra khi đăng nhập' };\r\n    }\r\n  };\r\n\r\n  // Đăng ký\r\n  const register = async (userData) => {\r\n    try {\r\n      // Mô phỏng API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const { name, email, password } = userData;\r\n      \r\n      // Kiểm tra email đã tồn tại chưa\r\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n      const existingUser = users.find(u => u.email === email);\r\n      \r\n      if (existingUser) {\r\n        return { success: false, error: 'Email đã được sử dụng' };\r\n      }\r\n      \r\n      // Tạo user mới\r\n      const newUser = {\r\n        id: Date.now(),\r\n        name,\r\n        email,\r\n        password,\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      \r\n      users.push(newUser);\r\n      localStorage.setItem('users', JSON.stringify(users));\r\n      \r\n      // Tự động đăng nhập sau khi đăng ký\r\n      const userInfo = {\r\n        id: newUser.id,\r\n        email: newUser.email,\r\n        name: newUser.name,\r\n        avatar: `https://ui-avatars.com/api/?name=${newUser.name}&background=3b82f6&color=fff`\r\n      };\r\n      \r\n      setUser(userInfo);\r\n      localStorage.setItem('user', JSON.stringify(userInfo));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: 'Có lỗi xảy ra khi đăng ký' };\r\n    }\r\n  };\r\n\r\n  // Đăng xuất\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isLoading,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAuthenticated: !!user\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}